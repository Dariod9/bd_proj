<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        RK5CYII=
</value>
  </data>
</root>